package org.web3j.model;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Array;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/LFDT-web3j/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.14.0.
 */
@SuppressWarnings("rawtypes")
public class SafeL2 extends Contract {
    public static final String BINARY = "6080604052348015600e575f5ffd5b50600160045561319a806100215f395ff3fe6080604052600436106101d0575f3560e01c8063affed0e0116100f6578063e19a9dd911610094578063f08a032311610063578063f08a0323146105d2578063f698da25146105f1578063f8dc5dd914610605578063ffa1ad74146106245761020c565b8063e19a9dd914610561578063e318b52b14610580578063e75235b81461059f578063e86637db146105b35761020c565b8063cc2f8452116100d0578063cc2f8452146104d7578063d4d9bdcd14610504578063d8d11f7814610523578063e009cfde146105425761020c565b8063affed0e014610484578063b4faba0914610499578063b63e800d146104b85761020c565b80635624b25b1161016e5780636a7612021161013d5780636a761202146103fb5780637d8329741461040e578063934f3a1114610444578063a0e67e2b146104635761020c565b80635624b25b146103665780635ae6bd3714610392578063610b5925146103bd578063694e80c3146103dc5761020c565b80632f54bf6e116101aa5780632f54bf6e146102df5780633408e470146102fe578063468721a71461031a5780635229073f146103395761020c565b80630d582f131461026b57806312fb68e01461028c5780632d9ad53d146102ab5761020c565b3661020c5760405134815233907f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d9060200160405180910390a2005b348015610217575f5ffd5b507f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d580548061024257005b365f5f373360601b36525f5f601436015f5f855af190503d5f5f3e80610266573d5ffd5b503d5ff35b348015610276575f5ffd5b5061028a6102853660046125fe565b610654565b005b348015610297575f5ffd5b5061028a6102a63660046126c5565b6107a9565b3480156102b6575f5ffd5b506102ca6102c5366004612738565b610c3a565b60405190151581526020015b60405180910390f35b3480156102ea575f5ffd5b506102ca6102f9366004612738565b610c73565b348015610309575f5ffd5b50465b6040519081526020016102d6565b348015610325575f5ffd5b506102ca610334366004612761565b610ca9565b348015610344575f5ffd5b50610358610353366004612761565b610cfe565b6040516102d69291906127f4565b348015610371575f5ffd5b5061038561038036600461280e565b610d32565b6040516102d6919061282e565b34801561039d575f5ffd5b5061030c6103ac366004612840565b60076020525f908152604090205481565b3480156103c8575f5ffd5b5061028a6103d7366004612738565b610dab565b3480156103e7575f5ffd5b5061028a6103f6366004612840565b610ee2565b6102ca61040936600461289b565b610f80565b348015610419575f5ffd5b5061030c6104283660046125fe565b600860209081525f928352604080842090915290825290205481565b34801561044f575f5ffd5b5061028a61045e36600461296b565b611027565b34801561046e575f5ffd5b50610477611071565b6040516102d69190612a19565b34801561048f575f5ffd5b5061030c60055481565b3480156104a4575f5ffd5b5061028a6104b3366004612a2b565b61115e565b3480156104c3575f5ffd5b5061028a6104d2366004612a77565b61117d565b3480156104e2575f5ffd5b506104f66104f13660046125fe565b61127c565b6040516102d6929190612b66565b34801561050f575f5ffd5b5061028a61051e366004612840565b611433565b34801561052e575f5ffd5b5061030c61053d366004612b8f565b6114c6565b34801561054d575f5ffd5b5061028a61055c366004612c4c565b6114f2565b34801561056c575f5ffd5b5061028a61057b366004612738565b611612565b34801561058b575f5ffd5b5061028a61059a366004612c83565b611725565b3480156105aa575f5ffd5b5060045461030c565b3480156105be575f5ffd5b506103856105cd366004612b8f565b6118fc565b3480156105dd575f5ffd5b5061028a6105ec366004612738565b6119d3565b3480156105fc575f5ffd5b5061030c611a1a565b348015610610575f5ffd5b5061028a61061f366004612ccb565b611a70565b34801561062f575f5ffd5b5061038560405180604001604052806005815260200164312e342e3160d81b81525081565b61065c611bd8565b6001600160a01b0382161580159061067e57506001600160a01b038216600114155b801561069357506001600160a01b0382163014155b6106b85760405162461bcd60e51b81526004016106af90612d09565b60405180910390fd5b6001600160a01b038281165f9081526002602052604090205416156106ef5760405162461bcd60e51b81526004016106af90612d28565b60026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e080546001600160a01b038481165f818152604081208054939094166001600160a01b03199384161790935560018352835490911617909155600380549161075b83612d5b565b90915550506040516001600160a01b038316907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26905f90a280600454146107a5576107a581610ee2565b5050565b6107b4816041611c11565b825110156107ec5760405162461bcd60e51b8152602060048201526005602482015264047533032360dc1b60448201526064016106af565b5f80808080805b86811015610c2e576041818102890160208101516040820151919092015160ff16955090935091505f8490036109fe57885160208a01208a146108605760405162461bcd60e51b8152602060048201526005602482015264475330323760d81b60448201526064016106af565b9193508391610870876041611c11565b8210156108a75760405162461bcd60e51b8152602060048201526005602482015264475330323160d81b60448201526064016106af565b87516108b4836020611c48565b11156108ea5760405162461bcd60e51b815260206004820152600560248201526423a998191960d91b60448201526064016106af565b60208289018101518951909161090d908390610907908790611c48565b90611c48565b11156109435760405162461bcd60e51b8152602060048201526005602482015264475330323360d81b60448201526064016106af565b6040516320c13b0b60e01b8082528a8501602001916001600160a01b038916906320c13b0b90610979908f908690600401612d73565b602060405180830381865afa158015610994573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109b89190612d97565b6001600160e01b031916146109f75760405162461bcd60e51b815260206004820152600560248201526411d4cc0c8d60da1b60448201526064016106af565b5050610b9e565b8360ff16600103610a7f579193508391336001600160a01b0384161480610a4657506001600160a01b0385165f9081526008602090815260408083208d845290915290205415155b610a7a5760405162461bcd60e51b8152602060048201526005602482015264475330323560d81b60448201526064016106af565b610b9e565b601e8460ff161115610b41576040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c81018b9052600190605c0160405160208183030381529060405280519060200120600486610ae49190612dbe565b604080515f8152602081018083529390935260ff90911690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015610b30573d5f5f3e3d5ffd5b505050602060405103519450610b9e565b604080515f8152602081018083528c905260ff861691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015610b91573d5f5f3e3d5ffd5b5050506020604051035194505b856001600160a01b0316856001600160a01b0316118015610bd757506001600160a01b038581165f908152600260205260409020541615155b8015610bed57506001600160a01b038516600114155b610c215760405162461bcd60e51b815260206004820152600560248201526423a998191b60d91b60448201526064016106af565b93945084936001016107f3565b50505050505050505050565b5f60016001600160a01b03831614801590610c6d57506001600160a01b038281165f908152600160205260409020541615155b92915050565b5f6001600160a01b038216600114801590610c6d5750506001600160a01b039081165f9081526002602052604090205416151590565b5f7fb648d3644f584ed1c2232d53c46d87e693586486ad0d1175f8656013110b714e3386868686604051610ce1959493929190612e0b565b60405180910390a1610cf585858585611c62565b95945050505050565b5f6060610d0d86868686610ca9565b915060405160203d0181016040523d81523d5f602083013e8091505094509492505050565b60605f610d40836020612e56565b6001600160401b03811115610d5757610d57612628565b6040519080825280601f01601f191660200182016040528015610d81576020820181803683370190505b5090505f5b83811015610da35784810154602080830284010152600101610d86565b509392505050565b610db3611bd8565b6001600160a01b03811615801590610dd557506001600160a01b038116600114155b610e095760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b60448201526064016106af565b6001600160a01b038181165f908152600160205260409020541615610e585760405162461bcd60e51b815260206004820152600560248201526423a998981960d91b60448201526064016106af565b600160208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b038481165f81815260408082208054949095166001600160a01b031994851617909455948552835490911681179092555190917fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f844091a250565b610eea611bd8565b600354811115610f0c5760405162461bcd60e51b81526004016106af90612e6d565b6001811015610f455760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b60448201526064016106af565b60048190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b60055460045460408051602081019390935233908301526060828101919091525f9160800160405160208183030381529060405290507f66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed8d8d8d8d8d8d8d8d8d8d8d8c604051610ffb9c9b9a99989796959493929190612eb4565b60405180910390a16110168d8d8d8d8d8d8d8d8d8d8d611d36565b9d9c50505050505050505050505050565b6004548061105f5760405162461bcd60e51b8152602060048201526005602482015264475330303160d81b60448201526064016106af565b61106b848484846107a9565b50505050565b60605f6003546001600160401b0381111561108e5761108e612628565b6040519080825280602002602001820160405280156110b7578160200160208202803683370190505b5060015f90815260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e054919250906001600160a01b03165b6001600160a01b038116600114611156578083838151811061111757611117612f52565b6001600160a01b039283166020918202929092018101919091529181165f9081526002909252604090912054168161114e81612d5b565b9250506110f3565b509092915050565b5f5f825160208401855af4805f52503d6020523d5f60403e60403d015ffd5b6111ba8a8a808060200260200160405190810160405280939291908181526020018383602002808284375f920191909152508c925061206f915050565b6001600160a01b038416156111d2576111d284612245565b6112118787878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506122a992505050565b811561122757611225825f600186856123d7565b505b336001600160a01b03167f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a88b8b8b8b89604051611268959493929190612f66565b60405180910390a250505050505050505050565b60605f6001600160a01b0384166001148061129b575061129b84610c3a565b6112cf5760405162461bcd60e51b8152602060048201526005602482015264475331303560d81b60448201526064016106af565b5f83116113065760405162461bcd60e51b815260206004820152600560248201526423a998981b60d91b60448201526064016106af565b826001600160401b0381111561131e5761131e612628565b604051908082528060200260200182016040528015611347578160200160208202803683370190505b506001600160a01b038086165f90815260016020526040812054929450911691505b6001600160a01b0382161580159061138b57506001600160a01b038216600114155b801561139657508381105b156113f057818382815181106113ae576113ae612f52565b6001600160a01b039283166020918202929092018101919091529281165f908152600190935260409092205490911690806113e881612d5b565b915050611369565b6001600160a01b038216600114611428578261140d600183612fd1565b8151811061141d5761141d612f52565b602002602001015191505b808352509250929050565b335f908152600260205260409020546001600160a01b031661147f5760405162461bcd60e51b8152602060048201526005602482015264047533033360dc1b60448201526064016106af565b335f818152600860209081526040808320858452909152808220600190555183917ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c91a350565b5f6114da8c8c8c8c8c8c8c8c8c8c8c6118fc565b8051906020012090509b9a5050505050505050505050565b6114fa611bd8565b6001600160a01b0381161580159061151c57506001600160a01b038116600114155b6115505760405162461bcd60e51b8152602060048201526005602482015264475331303160d81b60448201526064016106af565b6001600160a01b038281165f908152600160205260409020548116908216146115a35760405162461bcd60e51b8152602060048201526005602482015264475331303360d81b60448201526064016106af565b6001600160a01b038181165f81815260016020526040808220805487861684528284208054919096166001600160a01b0319918216179095558383528054909416909355915190917faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace405427691a25050565b61161a611bd8565b6001600160a01b038116156116ca576040516301ffc9a760e01b815263736bd41d60e11b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa158015611672573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116969190612fe4565b6116ca5760405162461bcd60e51b8152602060048201526005602482015264047533330360dc1b60448201526064016106af565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c88181556040516001600160a01b038316907f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2905f90a25050565b61172d611bd8565b6001600160a01b0381161580159061174f57506001600160a01b038116600114155b801561176457506001600160a01b0381163014155b6117805760405162461bcd60e51b81526004016106af90612d09565b6001600160a01b038181165f9081526002602052604090205416156117b75760405162461bcd60e51b81526004016106af90612d28565b6001600160a01b038216158015906117d957506001600160a01b038216600114155b6117f55760405162461bcd60e51b81526004016106af90612d09565b6001600160a01b038381165f908152600260205260409020548116908316146118485760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b60448201526064016106af565b6001600160a01b038281165f81815260026020526040808220805486861680855283852080549288166001600160a01b03199384161790559589168452828420805482169096179095558383528054909416909355915190917ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf91a26040516001600160a01b038216907f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26905f90a2505050565b60605f7fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d85f1b8d8d8d8d604051611934929190613003565b60405190819003812061195a949392918e908e908e908e908e908e908e90602001613012565b60408051601f1981840301815291905280516020909101209050601960f81b600160f81b611986611a1a565b6040516001600160f81b031993841660208201529290911660218301526022820152604281018290526062016040516020818303038152906040529150509b9a5050505050505050505050565b6119db611bd8565b6119e481612245565b6040516001600160a01b038216907f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b0905f90a250565b5f7f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692184660408051602081019390935282015230606082015260800160405160208183030381529060405280519060200120905090565b611a78611bd8565b806001600354611a889190612fd1565b1015611aa65760405162461bcd60e51b81526004016106af90612e6d565b6001600160a01b03821615801590611ac857506001600160a01b038216600114155b611ae45760405162461bcd60e51b81526004016106af90612d09565b6001600160a01b038381165f90815260026020526040902054811690831614611b375760405162461bcd60e51b8152602060048201526005602482015264475332303560d81b60448201526064016106af565b6001600160a01b038281165f81815260026020526040808220805488861684529183208054929095166001600160a01b03199283161790945591815282549091169091556003805491611b8983613084565b90915550506040516001600160a01b038316907ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf905f90a28060045414611bd357611bd381610ee2565b505050565b333014611c0f5760405162461bcd60e51b8152602060048201526005602482015264475330333160d81b60448201526064016106af565b565b5f825f03611c2057505f610c6d565b5f611c2b8385612e56565b905082611c388583613099565b14611c41575f5ffd5b9392505050565b5f80611c5483856130b8565b905083811015611c41575f5ffd5b5f33600114801590611c8a5750335f908152600160205260409020546001600160a01b031615155b611cbe5760405162461bcd60e51b815260206004820152600560248201526411d4cc4c0d60da1b60448201526064016106af565b611ccc858585855f196124db565b90508015611d035760405133907f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8905f90a2611d2e565b60405133907facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375905f90a25b949350505050565b5f5f5f611d4e8e8e8e8e8e8e8e8e8e8e6005546118fc565b600580549192505f611d5f83612d5b565b9091555050805160208201209150611d78828286611027565b505f611da27f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c85490565b90506001600160a01b03811615611e2357806001600160a01b03166375f0bb528f8f8f8f8f8f8f8f8f8f8f336040518d63ffffffff1660e01b8152600401611df59c9b9a999897969594939291906130cb565b5f604051808303815f87803b158015611e0c575f5ffd5b505af1158015611e1e573d5f5f3e3d5ffd5b505050505b611e4f611e328a6109c46130b8565b603f611e3f8c6040612e56565b611e499190613099565b9061251d565b611e5b906101f46130b8565b5a1015611e925760405162461bcd60e51b8152602060048201526005602482015264047533031360dc1b60448201526064016106af565b5f5a9050611f008f8f8f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050508e8c5f14611eed578e6124db565b6109c45a611efb9190612fd1565b6124db565b9350611f0d5a8290612533565b90508380611f1a57508915155b80611f2457508715155b611f585760405162461bcd60e51b8152602060048201526005602482015264475330313360d81b60448201526064016106af565b5f8815611f6f57611f6c828b8b8b8b6123d7565b90505b8415611fb457837f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e82604051611fa791815260200190565b60405180910390a2611fef565b837f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d2382604051611fe691815260200190565b60405180910390a25b50506001600160a01b0381161561205e57604051631264e26d60e31b81526004810183905283151560248201526001600160a01b038216906393271368906044015f604051808303815f87803b158015612047575f5ffd5b505af1158015612059573d5f5f3e3d5ffd5b505050505b50509b9a5050505050505050505050565b600454156120a75760405162461bcd60e51b8152602060048201526005602482015264047533230360dc1b60448201526064016106af565b81518111156120c85760405162461bcd60e51b81526004016106af90612e6d565b60018110156121015760405162461bcd60e51b815260206004820152600560248201526423a999181960d91b60448201526064016106af565b60015f5b8351811015612213575f84828151811061212157612121612f52565b602002602001015190505f6001600160a01b0316816001600160a01b03161415801561215757506001600160a01b038116600114155b801561216c57506001600160a01b0381163014155b801561218a5750806001600160a01b0316836001600160a01b031614155b6121a65760405162461bcd60e51b81526004016106af90612d09565b6001600160a01b038181165f9081526002602052604090205416156121dd5760405162461bcd60e51b81526004016106af90612d28565b6001600160a01b039283165f90815260026020526040902080546001600160a01b03191693821693909317909255600101612105565b506001600160a01b03165f90815260026020526040902080546001600160a01b03191660011790559051600355600455565b306001600160a01b038216036122855760405162461bcd60e51b8152602060048201526005602482015264047533430360dc1b60448201526064016106af565b7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b60015f8190526020527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f546001600160a01b0316156123125760405162461bcd60e51b8152602060048201526005602482015264047533130360dc1b60448201526064016106af565b60015f81905260208190527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80546001600160a01b03191690911790556001600160a01b038216156107a557813b6123945760405162461bcd60e51b815260206004820152600560248201526423a998181960d91b60448201526064016106af565b6123a3825f8360015f196124db565b6107a55760405162461bcd60e51b8152602060048201526005602482015264047533030360dc1b60448201526064016106af565b5f806001600160a01b038316156123ee57826123f0565b325b90506001600160a01b038416612482576124223a8610612410573a612412565b855b61241c8989611c48565b90611c11565b6040519092506001600160a01b0382169083156108fc029084905f818181858888f1935050505061247d5760405162461bcd60e51b8152602060048201526005602482015264475330313160d81b60448201526064016106af565b6124d1565b6124908561241c8989611c48565b915061249d84828461254b565b6124d15760405162461bcd60e51b815260206004820152600560248201526423a998189960d91b60448201526064016106af565b5095945050505050565b5f60018360018111156124f0576124f0612dd7565b03612507575f5f8551602087018986f49050610cf5565b5f5f855160208701888a87f19695505050505050565b5f8183101561252c5781611c41565b5090919050565b5f82821115612540575f5ffd5b5f611d2e8385612fd1565b604080516001600160a01b03841660248201526044808201849052825180830390910181526064909101909152602080820180516001600160e01b031663a9059cbb60e01b17815282515f93929184919082896127105a03f13d80156125bb57602081146125c3575f93506125cd565b8193506125cd565b5f51158215171593505b5050509392505050565b6001600160a01b03811681146125eb575f5ffd5b50565b80356125f9816125d7565b919050565b5f5f6040838503121561260f575f5ffd5b823561261a816125d7565b946020939093013593505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261264b575f5ffd5b81356001600160401b0381111561266457612664612628565b604051601f8201601f19908116603f011681016001600160401b038111828210171561269257612692612628565b6040528181528382016020018510156126a9575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f5f608085870312156126d8575f5ffd5b8435935060208501356001600160401b038111156126f4575f5ffd5b6127008782880161263c565b93505060408501356001600160401b0381111561271b575f5ffd5b6127278782880161263c565b949793965093946060013593505050565b5f60208284031215612748575f5ffd5b8135611c41816125d7565b8035600281106125f9575f5ffd5b5f5f5f5f60808587031215612774575f5ffd5b843561277f816125d7565b93506020850135925060408501356001600160401b038111156127a0575f5ffd5b6127ac8782880161263c565b9250506127bb60608601612753565b905092959194509250565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b8215158152604060208201525f611d2e60408301846127c6565b5f5f6040838503121561281f575f5ffd5b50508035926020909101359150565b602081525f611c4160208301846127c6565b5f60208284031215612850575f5ffd5b5035919050565b5f5f83601f840112612867575f5ffd5b5081356001600160401b0381111561287d575f5ffd5b602083019150836020828501011115612894575f5ffd5b9250929050565b5f5f5f5f5f5f5f5f5f5f5f6101408c8e0312156128b6575f5ffd5b6128bf8c6125ee565b9a5060208c0135995060408c01356001600160401b038111156128e0575f5ffd5b6128ec8e828f01612857565b909a5098506128ff905060608d01612753565b965060808c0135955060a08c0135945060c08c0135935061292260e08d016125ee565b92506129316101008d016125ee565b91506101208c01356001600160401b0381111561294c575f5ffd5b6129588e828f0161263c565b9150509295989b509295989b9093969950565b5f5f5f6060848603121561297d575f5ffd5b8335925060208401356001600160401b03811115612999575f5ffd5b6129a58682870161263c565b92505060408401356001600160401b038111156129c0575f5ffd5b6129cc8682870161263c565b9150509250925092565b5f8151808452602084019350602083015f5b82811015612a0f5781516001600160a01b03168652602095860195909101906001016129e8565b5093949350505050565b602081525f611c4160208301846129d6565b5f5f60408385031215612a3c575f5ffd5b8235612a47816125d7565b915060208301356001600160401b03811115612a61575f5ffd5b612a6d8582860161263c565b9150509250929050565b5f5f5f5f5f5f5f5f5f5f6101008b8d031215612a91575f5ffd5b8a356001600160401b03811115612aa6575f5ffd5b8b01601f81018d13612ab6575f5ffd5b80356001600160401b03811115612acb575f5ffd5b8d60208260051b8401011115612adf575f5ffd5b60209182019b5099508b01359750612af960408c016125ee565b965060608b01356001600160401b03811115612b13575f5ffd5b612b1f8d828e01612857565b9097509550612b32905060808c016125ee565b9350612b4060a08c016125ee565b925060c08b01359150612b5560e08c016125ee565b90509295989b9194979a5092959850565b604081525f612b7860408301856129d6565b905060018060a01b03831660208301529392505050565b5f5f5f5f5f5f5f5f5f5f5f6101408c8e031215612baa575f5ffd5b8b35612bb5816125d7565b9a5060208c0135995060408c01356001600160401b03811115612bd6575f5ffd5b612be28e828f01612857565b909a509850612bf5905060608d01612753565b965060808c0135955060a08c0135945060c08c0135935060e08c0135612c1a816125d7565b92506101008c0135612c2b816125d7565b809250505f6101208d01359050809150509295989b509295989b9093969950565b5f5f60408385031215612c5d575f5ffd5b8235612c68816125d7565b91506020830135612c78816125d7565b809150509250929050565b5f5f5f60608486031215612c95575f5ffd5b8335612ca0816125d7565b92506020840135612cb0816125d7565b91506040840135612cc0816125d7565b809150509250925092565b5f5f5f60608486031215612cdd575f5ffd5b8335612ce8816125d7565b92506020840135612cf8816125d7565b929592945050506040919091013590565b602080825260059082015264475332303360d81b604082015260600190565b60208082526005908201526411d4cc8c0d60da1b604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b5f60018201612d6c57612d6c612d47565b5060010190565b604081525f612d8560408301856127c6565b8281036020840152610cf581856127c6565b5f60208284031215612da7575f5ffd5b81516001600160e01b031981168114611c41575f5ffd5b60ff8281168282160390811115610c6d57610c6d612d47565b634e487b7160e01b5f52602160045260245ffd5b60028110612e0757634e487b7160e01b5f52602160045260245ffd5b9052565b6001600160a01b038681168252851660208201526040810184905260a0606082018190525f90612e3d908301856127c6565b9050612e4c6080830184612deb565b9695505050505050565b8082028115828204841417610c6d57610c6d612d47565b602080825260059082015264475332303160d81b604082015260600190565b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b60018060a01b038d1681528b602082015261016060408201525f612edd61016083018c8e612e8c565b612eea606084018c612deb565b608083018a905260a0830189905260c083018890526001600160a01b0387811660e08501528616610100840152828103610120840152612f2a81866127c6565b9050828103610140840152612f3f81856127c6565b9f9e505050505050505050505050505050565b634e487b7160e01b5f52603260045260245ffd5b608080825281018590525f8660a08301825b88811015612fa8578235612f8b816125d7565b6001600160a01b0316825260209283019290910190600101612f78565b50602084019690965250506001600160a01b039283166040820152911660609091015292915050565b81810381811115610c6d57610c6d612d47565b5f60208284031215612ff4575f5ffd5b81518015158114611c41575f5ffd5b818382375f9101908152919050565b8b81526001600160a01b038b166020820152604081018a9052606081018990526101608101613044608083018a612deb565b60a082019790975260c081019590955260e08501939093526001600160a01b03918216610100850152166101208301526101409091015295945050505050565b5f8161309257613092612d47565b505f190190565b5f826130b357634e487b7160e01b5f52601260045260245ffd5b500490565b80820180821115610c6d57610c6d612d47565b60018060a01b038d1681528b602082015261016060408201525f6130f461016083018c8e612e8c565b613101606084018c612deb565b608083018a905260a0830189905260c083018890526001600160a01b0387811660e0850152861661010084015282810361012084015261314181866127c6565b91505060018060a01b0383166101408301529d9c5050505050505050505050505056fea264697066735822122036f8f2675c40e7d5d000ac1ec4f7bf8bf1bb535aafc085b7e301cc072f7e7ba764736f6c634300081d0033";

    private static String librariesLinkedBinary;

    public static final String FUNC_VERSION = "VERSION";

    public static final String FUNC_ADDOWNERWITHTHRESHOLD = "addOwnerWithThreshold";

    public static final String FUNC_APPROVEHASH = "approveHash";

    public static final String FUNC_APPROVEDHASHES = "approvedHashes";

    public static final String FUNC_CHANGETHRESHOLD = "changeThreshold";

    public static final String FUNC_CHECKNSIGNATURES = "checkNSignatures";

    public static final String FUNC_CHECKSIGNATURES = "checkSignatures";

    public static final String FUNC_DISABLEMODULE = "disableModule";

    public static final String FUNC_DOMAINSEPARATOR = "domainSeparator";

    public static final String FUNC_ENABLEMODULE = "enableModule";

    public static final String FUNC_ENCODETRANSACTIONDATA = "encodeTransactionData";

    public static final String FUNC_EXECTRANSACTION = "execTransaction";

    public static final String FUNC_EXECTRANSACTIONFROMMODULE = "execTransactionFromModule";

    public static final String FUNC_EXECTRANSACTIONFROMMODULERETURNDATA = "execTransactionFromModuleReturnData";

    public static final String FUNC_GETCHAINID = "getChainId";

    public static final String FUNC_GETMODULESPAGINATED = "getModulesPaginated";

    public static final String FUNC_GETOWNERS = "getOwners";

    public static final String FUNC_GETSTORAGEAT = "getStorageAt";

    public static final String FUNC_GETTHRESHOLD = "getThreshold";

    public static final String FUNC_GETTRANSACTIONHASH = "getTransactionHash";

    public static final String FUNC_ISMODULEENABLED = "isModuleEnabled";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_NONCE = "nonce";

    public static final String FUNC_REMOVEOWNER = "removeOwner";

    public static final String FUNC_SETFALLBACKHANDLER = "setFallbackHandler";

    public static final String FUNC_SETGUARD = "setGuard";

    public static final String FUNC_SETUP = "setup";

    public static final String FUNC_SIGNEDMESSAGES = "signedMessages";

    public static final String FUNC_SIMULATEANDREVERT = "simulateAndRevert";

    public static final String FUNC_SWAPOWNER = "swapOwner";

    public static final Event ADDEDOWNER_EVENT = new Event("AddedOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event APPROVEHASH_EVENT = new Event("ApproveHash", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event CHANGEDFALLBACKHANDLER_EVENT = new Event("ChangedFallbackHandler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event CHANGEDGUARD_EVENT = new Event("ChangedGuard", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event CHANGEDTHRESHOLD_EVENT = new Event("ChangedThreshold", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event DISABLEDMODULE_EVENT = new Event("DisabledModule", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event ENABLEDMODULE_EVENT = new Event("EnabledModule", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event EXECUTIONFAILURE_EVENT = new Event("ExecutionFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXECUTIONFROMMODULEFAILURE_EVENT = new Event("ExecutionFromModuleFailure", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event EXECUTIONFROMMODULESUCCESS_EVENT = new Event("ExecutionFromModuleSuccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event EXECUTIONSUCCESS_EVENT = new Event("ExecutionSuccess", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event REMOVEDOWNER_EVENT = new Event("RemovedOwner", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SAFEMODULETRANSACTION_EVENT = new Event("SafeModuleTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint8>() {}));
    ;

    public static final Event SAFEMULTISIGTRANSACTION_EVENT = new Event("SafeMultiSigTransaction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event SAFERECEIVED_EVENT = new Event("SafeReceived", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SAFESETUP_EVENT = new Event("SafeSetup", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event SIGNMSG_EVENT = new Event("SignMsg", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    @Deprecated
    protected SafeL2(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SafeL2(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SafeL2(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SafeL2(String contractAddress, Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<AddedOwnerEventResponse> getAddedOwnerEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ADDEDOWNER_EVENT, transactionReceipt);
        ArrayList<AddedOwnerEventResponse> responses = new ArrayList<AddedOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddedOwnerEventResponse typedResponse = new AddedOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static AddedOwnerEventResponse getAddedOwnerEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ADDEDOWNER_EVENT, log);
        AddedOwnerEventResponse typedResponse = new AddedOwnerEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<AddedOwnerEventResponse> addedOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getAddedOwnerEventFromLog(log));
    }

    public Flowable<AddedOwnerEventResponse> addedOwnerEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDEDOWNER_EVENT));
        return addedOwnerEventFlowable(filter);
    }

    public static List<ApproveHashEventResponse> getApproveHashEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(APPROVEHASH_EVENT, transactionReceipt);
        ArrayList<ApproveHashEventResponse> responses = new ArrayList<ApproveHashEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ApproveHashEventResponse typedResponse = new ApproveHashEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.approvedHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ApproveHashEventResponse getApproveHashEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(APPROVEHASH_EVENT, log);
        ApproveHashEventResponse typedResponse = new ApproveHashEventResponse();
        typedResponse.log = log;
        typedResponse.approvedHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.owner = (String) eventValues.getIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ApproveHashEventResponse> approveHashEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getApproveHashEventFromLog(log));
    }

    public Flowable<ApproveHashEventResponse> approveHashEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(APPROVEHASH_EVENT));
        return approveHashEventFlowable(filter);
    }

    public static List<ChangedFallbackHandlerEventResponse> getChangedFallbackHandlerEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHANGEDFALLBACKHANDLER_EVENT, transactionReceipt);
        ArrayList<ChangedFallbackHandlerEventResponse> responses = new ArrayList<ChangedFallbackHandlerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangedFallbackHandlerEventResponse typedResponse = new ChangedFallbackHandlerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.handler = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChangedFallbackHandlerEventResponse getChangedFallbackHandlerEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHANGEDFALLBACKHANDLER_EVENT, log);
        ChangedFallbackHandlerEventResponse typedResponse = new ChangedFallbackHandlerEventResponse();
        typedResponse.log = log;
        typedResponse.handler = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ChangedFallbackHandlerEventResponse> changedFallbackHandlerEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChangedFallbackHandlerEventFromLog(log));
    }

    public Flowable<ChangedFallbackHandlerEventResponse> changedFallbackHandlerEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGEDFALLBACKHANDLER_EVENT));
        return changedFallbackHandlerEventFlowable(filter);
    }

    public static List<ChangedGuardEventResponse> getChangedGuardEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHANGEDGUARD_EVENT, transactionReceipt);
        ArrayList<ChangedGuardEventResponse> responses = new ArrayList<ChangedGuardEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangedGuardEventResponse typedResponse = new ChangedGuardEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.guard = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChangedGuardEventResponse getChangedGuardEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHANGEDGUARD_EVENT, log);
        ChangedGuardEventResponse typedResponse = new ChangedGuardEventResponse();
        typedResponse.log = log;
        typedResponse.guard = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ChangedGuardEventResponse> changedGuardEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChangedGuardEventFromLog(log));
    }

    public Flowable<ChangedGuardEventResponse> changedGuardEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGEDGUARD_EVENT));
        return changedGuardEventFlowable(filter);
    }

    public static List<ChangedThresholdEventResponse> getChangedThresholdEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(CHANGEDTHRESHOLD_EVENT, transactionReceipt);
        ArrayList<ChangedThresholdEventResponse> responses = new ArrayList<ChangedThresholdEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ChangedThresholdEventResponse typedResponse = new ChangedThresholdEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ChangedThresholdEventResponse getChangedThresholdEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(CHANGEDTHRESHOLD_EVENT, log);
        ChangedThresholdEventResponse typedResponse = new ChangedThresholdEventResponse();
        typedResponse.log = log;
        typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ChangedThresholdEventResponse> changedThresholdEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getChangedThresholdEventFromLog(log));
    }

    public Flowable<ChangedThresholdEventResponse> changedThresholdEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHANGEDTHRESHOLD_EVENT));
        return changedThresholdEventFlowable(filter);
    }

    public static List<DisabledModuleEventResponse> getDisabledModuleEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DISABLEDMODULE_EVENT, transactionReceipt);
        ArrayList<DisabledModuleEventResponse> responses = new ArrayList<DisabledModuleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DisabledModuleEventResponse typedResponse = new DisabledModuleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DisabledModuleEventResponse getDisabledModuleEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DISABLEDMODULE_EVENT, log);
        DisabledModuleEventResponse typedResponse = new DisabledModuleEventResponse();
        typedResponse.log = log;
        typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DisabledModuleEventResponse> disabledModuleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDisabledModuleEventFromLog(log));
    }

    public Flowable<DisabledModuleEventResponse> disabledModuleEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DISABLEDMODULE_EVENT));
        return disabledModuleEventFlowable(filter);
    }

    public static List<EnabledModuleEventResponse> getEnabledModuleEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(ENABLEDMODULE_EVENT, transactionReceipt);
        ArrayList<EnabledModuleEventResponse> responses = new ArrayList<EnabledModuleEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EnabledModuleEventResponse typedResponse = new EnabledModuleEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static EnabledModuleEventResponse getEnabledModuleEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(ENABLEDMODULE_EVENT, log);
        EnabledModuleEventResponse typedResponse = new EnabledModuleEventResponse();
        typedResponse.log = log;
        typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<EnabledModuleEventResponse> enabledModuleEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getEnabledModuleEventFromLog(log));
    }

    public Flowable<EnabledModuleEventResponse> enabledModuleEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENABLEDMODULE_EVENT));
        return enabledModuleEventFlowable(filter);
    }

    public static List<ExecutionFailureEventResponse> getExecutionFailureEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EXECUTIONFAILURE_EVENT, transactionReceipt);
        ArrayList<ExecutionFailureEventResponse> responses = new ArrayList<ExecutionFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecutionFailureEventResponse typedResponse = new ExecutionFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.payment = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ExecutionFailureEventResponse getExecutionFailureEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EXECUTIONFAILURE_EVENT, log);
        ExecutionFailureEventResponse typedResponse = new ExecutionFailureEventResponse();
        typedResponse.log = log;
        typedResponse.txHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.payment = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ExecutionFailureEventResponse> executionFailureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getExecutionFailureEventFromLog(log));
    }

    public Flowable<ExecutionFailureEventResponse> executionFailureEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXECUTIONFAILURE_EVENT));
        return executionFailureEventFlowable(filter);
    }

    public static List<ExecutionFromModuleFailureEventResponse> getExecutionFromModuleFailureEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EXECUTIONFROMMODULEFAILURE_EVENT, transactionReceipt);
        ArrayList<ExecutionFromModuleFailureEventResponse> responses = new ArrayList<ExecutionFromModuleFailureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecutionFromModuleFailureEventResponse typedResponse = new ExecutionFromModuleFailureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ExecutionFromModuleFailureEventResponse getExecutionFromModuleFailureEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EXECUTIONFROMMODULEFAILURE_EVENT, log);
        ExecutionFromModuleFailureEventResponse typedResponse = new ExecutionFromModuleFailureEventResponse();
        typedResponse.log = log;
        typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ExecutionFromModuleFailureEventResponse> executionFromModuleFailureEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getExecutionFromModuleFailureEventFromLog(log));
    }

    public Flowable<ExecutionFromModuleFailureEventResponse> executionFromModuleFailureEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXECUTIONFROMMODULEFAILURE_EVENT));
        return executionFromModuleFailureEventFlowable(filter);
    }

    public static List<ExecutionFromModuleSuccessEventResponse> getExecutionFromModuleSuccessEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EXECUTIONFROMMODULESUCCESS_EVENT, transactionReceipt);
        ArrayList<ExecutionFromModuleSuccessEventResponse> responses = new ArrayList<ExecutionFromModuleSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecutionFromModuleSuccessEventResponse typedResponse = new ExecutionFromModuleSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ExecutionFromModuleSuccessEventResponse getExecutionFromModuleSuccessEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EXECUTIONFROMMODULESUCCESS_EVENT, log);
        ExecutionFromModuleSuccessEventResponse typedResponse = new ExecutionFromModuleSuccessEventResponse();
        typedResponse.log = log;
        typedResponse.module = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ExecutionFromModuleSuccessEventResponse> executionFromModuleSuccessEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getExecutionFromModuleSuccessEventFromLog(log));
    }

    public Flowable<ExecutionFromModuleSuccessEventResponse> executionFromModuleSuccessEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXECUTIONFROMMODULESUCCESS_EVENT));
        return executionFromModuleSuccessEventFlowable(filter);
    }

    public static List<ExecutionSuccessEventResponse> getExecutionSuccessEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(EXECUTIONSUCCESS_EVENT, transactionReceipt);
        ArrayList<ExecutionSuccessEventResponse> responses = new ArrayList<ExecutionSuccessEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ExecutionSuccessEventResponse typedResponse = new ExecutionSuccessEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.txHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.payment = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ExecutionSuccessEventResponse getExecutionSuccessEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(EXECUTIONSUCCESS_EVENT, log);
        ExecutionSuccessEventResponse typedResponse = new ExecutionSuccessEventResponse();
        typedResponse.log = log;
        typedResponse.txHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.payment = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<ExecutionSuccessEventResponse> executionSuccessEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getExecutionSuccessEventFromLog(log));
    }

    public Flowable<ExecutionSuccessEventResponse> executionSuccessEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXECUTIONSUCCESS_EVENT));
        return executionSuccessEventFlowable(filter);
    }

    public static List<RemovedOwnerEventResponse> getRemovedOwnerEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(REMOVEDOWNER_EVENT, transactionReceipt);
        ArrayList<RemovedOwnerEventResponse> responses = new ArrayList<RemovedOwnerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemovedOwnerEventResponse typedResponse = new RemovedOwnerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static RemovedOwnerEventResponse getRemovedOwnerEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(REMOVEDOWNER_EVENT, log);
        RemovedOwnerEventResponse typedResponse = new RemovedOwnerEventResponse();
        typedResponse.log = log;
        typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<RemovedOwnerEventResponse> removedOwnerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getRemovedOwnerEventFromLog(log));
    }

    public Flowable<RemovedOwnerEventResponse> removedOwnerEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REMOVEDOWNER_EVENT));
        return removedOwnerEventFlowable(filter);
    }

    public static List<SafeModuleTransactionEventResponse> getSafeModuleTransactionEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SAFEMODULETRANSACTION_EVENT, transactionReceipt);
        ArrayList<SafeModuleTransactionEventResponse> responses = new ArrayList<SafeModuleTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SafeModuleTransactionEventResponse typedResponse = new SafeModuleTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.module = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.operation = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SafeModuleTransactionEventResponse getSafeModuleTransactionEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SAFEMODULETRANSACTION_EVENT, log);
        SafeModuleTransactionEventResponse typedResponse = new SafeModuleTransactionEventResponse();
        typedResponse.log = log;
        typedResponse.module = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.to = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.operation = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        return typedResponse;
    }

    public Flowable<SafeModuleTransactionEventResponse> safeModuleTransactionEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSafeModuleTransactionEventFromLog(log));
    }

    public Flowable<SafeModuleTransactionEventResponse> safeModuleTransactionEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAFEMODULETRANSACTION_EVENT));
        return safeModuleTransactionEventFlowable(filter);
    }

    public static List<SafeMultiSigTransactionEventResponse> getSafeMultiSigTransactionEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SAFEMULTISIGTRANSACTION_EVENT, transactionReceipt);
        ArrayList<SafeMultiSigTransactionEventResponse> responses = new ArrayList<SafeMultiSigTransactionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SafeMultiSigTransactionEventResponse typedResponse = new SafeMultiSigTransactionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.operation = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.safeTxGas = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
            typedResponse.baseGas = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
            typedResponse.gasPrice = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
            typedResponse.gasToken = (String) eventValues.getNonIndexedValues().get(7).getValue();
            typedResponse.refundReceiver = (String) eventValues.getNonIndexedValues().get(8).getValue();
            typedResponse.signatures = (byte[]) eventValues.getNonIndexedValues().get(9).getValue();
            typedResponse.additionalInfo = (byte[]) eventValues.getNonIndexedValues().get(10).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SafeMultiSigTransactionEventResponse getSafeMultiSigTransactionEventFromLog(
            Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SAFEMULTISIGTRANSACTION_EVENT, log);
        SafeMultiSigTransactionEventResponse typedResponse = new SafeMultiSigTransactionEventResponse();
        typedResponse.log = log;
        typedResponse.to = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.data = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.operation = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
        typedResponse.safeTxGas = (BigInteger) eventValues.getNonIndexedValues().get(4).getValue();
        typedResponse.baseGas = (BigInteger) eventValues.getNonIndexedValues().get(5).getValue();
        typedResponse.gasPrice = (BigInteger) eventValues.getNonIndexedValues().get(6).getValue();
        typedResponse.gasToken = (String) eventValues.getNonIndexedValues().get(7).getValue();
        typedResponse.refundReceiver = (String) eventValues.getNonIndexedValues().get(8).getValue();
        typedResponse.signatures = (byte[]) eventValues.getNonIndexedValues().get(9).getValue();
        typedResponse.additionalInfo = (byte[]) eventValues.getNonIndexedValues().get(10).getValue();
        return typedResponse;
    }

    public Flowable<SafeMultiSigTransactionEventResponse> safeMultiSigTransactionEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSafeMultiSigTransactionEventFromLog(log));
    }

    public Flowable<SafeMultiSigTransactionEventResponse> safeMultiSigTransactionEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAFEMULTISIGTRANSACTION_EVENT));
        return safeMultiSigTransactionEventFlowable(filter);
    }

    public static List<SafeReceivedEventResponse> getSafeReceivedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SAFERECEIVED_EVENT, transactionReceipt);
        ArrayList<SafeReceivedEventResponse> responses = new ArrayList<SafeReceivedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SafeReceivedEventResponse typedResponse = new SafeReceivedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SafeReceivedEventResponse getSafeReceivedEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SAFERECEIVED_EVENT, log);
        SafeReceivedEventResponse typedResponse = new SafeReceivedEventResponse();
        typedResponse.log = log;
        typedResponse.sender = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SafeReceivedEventResponse> safeReceivedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSafeReceivedEventFromLog(log));
    }

    public Flowable<SafeReceivedEventResponse> safeReceivedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAFERECEIVED_EVENT));
        return safeReceivedEventFlowable(filter);
    }

    public static List<SafeSetupEventResponse> getSafeSetupEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SAFESETUP_EVENT, transactionReceipt);
        ArrayList<SafeSetupEventResponse> responses = new ArrayList<SafeSetupEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SafeSetupEventResponse typedResponse = new SafeSetupEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.initiator = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.owners = (List<String>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
            typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.initializer = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.fallbackHandler = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SafeSetupEventResponse getSafeSetupEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SAFESETUP_EVENT, log);
        SafeSetupEventResponse typedResponse = new SafeSetupEventResponse();
        typedResponse.log = log;
        typedResponse.initiator = (String) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.owners = (List<String>) ((Array) eventValues.getNonIndexedValues().get(0)).getNativeValueCopy();
        typedResponse.threshold = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.initializer = (String) eventValues.getNonIndexedValues().get(2).getValue();
        typedResponse.fallbackHandler = (String) eventValues.getNonIndexedValues().get(3).getValue();
        return typedResponse;
    }

    public Flowable<SafeSetupEventResponse> safeSetupEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSafeSetupEventFromLog(log));
    }

    public Flowable<SafeSetupEventResponse> safeSetupEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SAFESETUP_EVENT));
        return safeSetupEventFlowable(filter);
    }

    public static List<SignMsgEventResponse> getSignMsgEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = staticExtractEventParametersWithLog(SIGNMSG_EVENT, transactionReceipt);
        ArrayList<SignMsgEventResponse> responses = new ArrayList<SignMsgEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignMsgEventResponse typedResponse = new SignMsgEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.msgHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static SignMsgEventResponse getSignMsgEventFromLog(Log log) {
        Contract.EventValuesWithLog eventValues = staticExtractEventParametersWithLog(SIGNMSG_EVENT, log);
        SignMsgEventResponse typedResponse = new SignMsgEventResponse();
        typedResponse.log = log;
        typedResponse.msgHash = (byte[]) eventValues.getIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<SignMsgEventResponse> signMsgEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getSignMsgEventFromLog(log));
    }

    public Flowable<SignMsgEventResponse> signMsgEventFlowable(DefaultBlockParameter startBlock,
            DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNMSG_EVENT));
        return signMsgEventFlowable(filter);
    }

    public RemoteFunctionCall<String> VERSION() {
        final Function function = new Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addOwnerWithThreshold(String owner,
            BigInteger _threshold) {
        final Function function = new Function(
                FUNC_ADDOWNERWITHTHRESHOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_threshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> approveHash(byte[] hashToApprove) {
        final Function function = new Function(
                FUNC_APPROVEHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(hashToApprove)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> approvedHashes(String param0, byte[] param1) {
        final Function function = new Function(FUNC_APPROVEDHASHES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.generated.Bytes32(param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> changeThreshold(BigInteger _threshold) {
        final Function function = new Function(
                FUNC_CHANGETHRESHOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_threshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> disableModule(String prevModule, String module) {
        final Function function = new Function(
                FUNC_DISABLEMODULE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, prevModule), 
                new org.web3j.abi.datatypes.Address(160, module)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> domainSeparator() {
        final Function function = new Function(FUNC_DOMAINSEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> enableModule(String module) {
        final Function function = new Function(
                FUNC_ENABLEMODULE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, module)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> encodeTransactionData(String to, BigInteger value,
            byte[] data, BigInteger operation, BigInteger safeTxGas, BigInteger baseGas,
            BigInteger gasPrice, String gasToken, String refundReceiver, BigInteger _nonce) {
        final Function function = new Function(FUNC_ENCODETRANSACTIONDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new org.web3j.abi.datatypes.generated.Uint8(operation), 
                new org.web3j.abi.datatypes.generated.Uint256(safeTxGas), 
                new org.web3j.abi.datatypes.generated.Uint256(baseGas), 
                new org.web3j.abi.datatypes.generated.Uint256(gasPrice), 
                new org.web3j.abi.datatypes.Address(160, gasToken), 
                new org.web3j.abi.datatypes.Address(160, refundReceiver), 
                new org.web3j.abi.datatypes.generated.Uint256(_nonce)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> execTransaction(String to, BigInteger value,
            byte[] data, BigInteger operation, BigInteger safeTxGas, BigInteger baseGas,
            BigInteger gasPrice, String gasToken, String refundReceiver, byte[] signatures,
            BigInteger weiValue) {
        final Function function = new Function(
                FUNC_EXECTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new org.web3j.abi.datatypes.generated.Uint8(operation), 
                new org.web3j.abi.datatypes.generated.Uint256(safeTxGas), 
                new org.web3j.abi.datatypes.generated.Uint256(baseGas), 
                new org.web3j.abi.datatypes.generated.Uint256(gasPrice), 
                new org.web3j.abi.datatypes.Address(160, gasToken), 
                new org.web3j.abi.datatypes.Address(160, refundReceiver), 
                new org.web3j.abi.datatypes.DynamicBytes(signatures)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> execTransactionFromModule(String to,
            BigInteger value, byte[] data, BigInteger operation) {
        final Function function = new Function(
                FUNC_EXECTRANSACTIONFROMMODULE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new org.web3j.abi.datatypes.generated.Uint8(operation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> execTransactionFromModuleReturnData(String to,
            BigInteger value, byte[] data, BigInteger operation) {
        final Function function = new Function(
                FUNC_EXECTRANSACTIONFROMMODULERETURNDATA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new org.web3j.abi.datatypes.generated.Uint8(operation)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getChainId() {
        final Function function = new Function(FUNC_GETCHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<List<String>, String>> getModulesPaginated(String start,
            BigInteger pageSize) {
        final Function function = new Function(FUNC_GETMODULESPAGINATED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, start), 
                new org.web3j.abi.datatypes.generated.Uint256(pageSize)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple2<List<String>, String>>(function,
                new Callable<Tuple2<List<String>, String>>() {
                    @Override
                    public Tuple2<List<String>, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<String>, String>(
                                convertToNative((List<Address>) results.get(0).getValue()), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getOwners() {
        final Function function = new Function(FUNC_GETOWNERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<byte[]> getStorageAt(BigInteger offset, BigInteger length) {
        final Function function = new Function(FUNC_GETSTORAGEAT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(offset), 
                new org.web3j.abi.datatypes.generated.Uint256(length)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> getThreshold() {
        final Function function = new Function(FUNC_GETTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getTransactionHash(String to, BigInteger value, byte[] data,
            BigInteger operation, BigInteger safeTxGas, BigInteger baseGas, BigInteger gasPrice,
            String gasToken, String refundReceiver, BigInteger _nonce) {
        final Function function = new Function(FUNC_GETTRANSACTIONHASH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.generated.Uint256(value), 
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new org.web3j.abi.datatypes.generated.Uint8(operation), 
                new org.web3j.abi.datatypes.generated.Uint256(safeTxGas), 
                new org.web3j.abi.datatypes.generated.Uint256(baseGas), 
                new org.web3j.abi.datatypes.generated.Uint256(gasPrice), 
                new org.web3j.abi.datatypes.Address(160, gasToken), 
                new org.web3j.abi.datatypes.Address(160, refundReceiver), 
                new org.web3j.abi.datatypes.generated.Uint256(_nonce)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<Boolean> isModuleEnabled(String module) {
        final Function function = new Function(FUNC_ISMODULEENABLED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, module)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner(String owner) {
        final Function function = new Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> nonce() {
        final Function function = new Function(FUNC_NONCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> removeOwner(String prevOwner, String owner,
            BigInteger _threshold) {
        final Function function = new Function(
                FUNC_REMOVEOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, prevOwner), 
                new org.web3j.abi.datatypes.Address(160, owner), 
                new org.web3j.abi.datatypes.generated.Uint256(_threshold)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setFallbackHandler(String handler) {
        final Function function = new Function(
                FUNC_SETFALLBACKHANDLER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, handler)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGuard(String guard) {
        final Function function = new Function(
                FUNC_SETGUARD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, guard)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setup(List<String> _owners, BigInteger _threshold,
            String to, byte[] data, String fallbackHandler, String paymentToken, BigInteger payment,
            String paymentReceiver) {
        final Function function = new Function(
                FUNC_SETUP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.datatypes.Address.class,
                        org.web3j.abi.Utils.typeMap(_owners, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_threshold), 
                new org.web3j.abi.datatypes.Address(160, to), 
                new org.web3j.abi.datatypes.DynamicBytes(data), 
                new org.web3j.abi.datatypes.Address(160, fallbackHandler), 
                new org.web3j.abi.datatypes.Address(160, paymentToken), 
                new org.web3j.abi.datatypes.generated.Uint256(payment), 
                new org.web3j.abi.datatypes.Address(160, paymentReceiver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> signedMessages(byte[] param0) {
        final Function function = new Function(FUNC_SIGNEDMESSAGES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> simulateAndRevert(String targetContract,
            byte[] calldataPayload) {
        final Function function = new Function(
                FUNC_SIMULATEANDREVERT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, targetContract), 
                new org.web3j.abi.datatypes.DynamicBytes(calldataPayload)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> swapOwner(String prevOwner, String oldOwner,
            String newOwner) {
        final Function function = new Function(
                FUNC_SWAPOWNER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, prevOwner), 
                new org.web3j.abi.datatypes.Address(160, oldOwner), 
                new org.web3j.abi.datatypes.Address(160, newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SafeL2 load(String contractAddress, Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return new SafeL2(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SafeL2 load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SafeL2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SafeL2 load(String contractAddress, Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return new SafeL2(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SafeL2 load(String contractAddress, Web3j web3j,
            TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SafeL2(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SafeL2> deploy(Web3j web3j, Credentials credentials,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SafeL2.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SafeL2> deploy(Web3j web3j, Credentials credentials,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SafeL2.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static RemoteCall<SafeL2> deploy(Web3j web3j, TransactionManager transactionManager,
            ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SafeL2.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<SafeL2> deploy(Web3j web3j, TransactionManager transactionManager,
            BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SafeL2.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class AddedOwnerEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class ApproveHashEventResponse extends BaseEventResponse {
        public byte[] approvedHash;

        public String owner;
    }

    public static class ChangedFallbackHandlerEventResponse extends BaseEventResponse {
        public String handler;
    }

    public static class ChangedGuardEventResponse extends BaseEventResponse {
        public String guard;
    }

    public static class ChangedThresholdEventResponse extends BaseEventResponse {
        public BigInteger threshold;
    }

    public static class DisabledModuleEventResponse extends BaseEventResponse {
        public String module;
    }

    public static class EnabledModuleEventResponse extends BaseEventResponse {
        public String module;
    }

    public static class ExecutionFailureEventResponse extends BaseEventResponse {
        public byte[] txHash;

        public BigInteger payment;
    }

    public static class ExecutionFromModuleFailureEventResponse extends BaseEventResponse {
        public String module;
    }

    public static class ExecutionFromModuleSuccessEventResponse extends BaseEventResponse {
        public String module;
    }

    public static class ExecutionSuccessEventResponse extends BaseEventResponse {
        public byte[] txHash;

        public BigInteger payment;
    }

    public static class RemovedOwnerEventResponse extends BaseEventResponse {
        public String owner;
    }

    public static class SafeModuleTransactionEventResponse extends BaseEventResponse {
        public String module;

        public String to;

        public BigInteger value;

        public byte[] data;

        public BigInteger operation;
    }

    public static class SafeMultiSigTransactionEventResponse extends BaseEventResponse {
        public String to;

        public BigInteger value;

        public byte[] data;

        public BigInteger operation;

        public BigInteger safeTxGas;

        public BigInteger baseGas;

        public BigInteger gasPrice;

        public String gasToken;

        public String refundReceiver;

        public byte[] signatures;

        public byte[] additionalInfo;
    }

    public static class SafeReceivedEventResponse extends BaseEventResponse {
        public String sender;

        public BigInteger value;
    }

    public static class SafeSetupEventResponse extends BaseEventResponse {
        public String initiator;

        public List<String> owners;

        public BigInteger threshold;

        public String initializer;

        public String fallbackHandler;
    }

    public static class SignMsgEventResponse extends BaseEventResponse {
        public byte[] msgHash;
    }
}
